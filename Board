package com.company;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Board extends JPanel implements ActionListener {

    private Image ball;
    private Image apple;
    private Image head;
    private Timer timer;

    private int dots;
    private int appleX;
    private int appleY;
    private boolean lDirection = false;
    private boolean rDirection = true;
    private boolean uDirection = false;
    private boolean dDirection = false;
    private boolean inGame = true;

    private final int BOARD_WIDTH = 300;
    private final int BOARD_HEIGHT = 300;
    private final int DOT_SIZE = 10;
    private final int TOTAL_DOTS = 900;
    private final int RANDOM_POSITION = 29;
    private final int DELAY = 140;
    private final int x[] = new int[TOTAL_DOTS];
    private final int y[] = new int[TOTAL_DOTS];

    public Board() {
        addKeyListener(new TAdapter());
        setBackground(Color.black);
        setFocusable(true);
        setPreferredSize(new Dimension(BOARD_WIDTH, BOARD_HEIGHT));
        loadImages();
        initGame();
    }

    private void loadImages() {

        ImageIcon iDot = new ImageIcon("dot.png");
        ball = iDot.getImage();

        ImageIcon iApple = new ImageIcon("apple.png");
        apple = iApple.getImage();

        ImageIcon iHead = new ImageIcon("head.png");
        head = iHead.getImage();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g);
    }

    private void initGame() {
        dots = 3;
        for (int z = 0; z < dots; z++) {
            x[z] = 50 - z * 10;
            y[z] = 50;
        }
        locateApple();

        timer = new Timer(DELAY, this);
        timer.start();
    }

    private void gameOver(Graphics g) {
        String msg = "Game Over";
        Font small = new Font("Helvetica", Font.BOLD, 14);
        FontMetrics metr = getFontMetrics(small);

        g.setColor(Color.white);
        g.setFont(small);
        g.drawString(msg, (BOARD_WIDTH - metr.stringWidth(msg)) / 2, BOARD_HEIGHT / 2);
    }

    private void doDrawing(Graphics g) {
        if (inGame) {
            g.drawImage(apple, appleX, appleY, this);

            for (int z = 0; z < dots; z++) {
                if (z == 0) {
                    g.drawImage(head, x[z], y[z], this);
                } else {
                    g.drawImage(ball, x[z], y[z], this);
                }
            }
            Toolkit.getDefaultToolkit().sync();

        } else {
            gameOver(g);
        }
    }

    private void checkApple() {
        if ((x[0] == appleX) && (y[0] == appleY)) {

            dots++;
            locateApple();
        }
    }

    private void move() {
        for (int z = dots; z > 0; z--) {
            x[z] = x[(z - 1)];
            y[z] = y[(z - 1)];
        }
        if (lDirection) {
            x[0] -= DOT_SIZE;
        }
        if (rDirection) {
            x[0] += DOT_SIZE;
        }
        if (uDirection) {
            y[0] -= DOT_SIZE;
        }
        if (dDirection) {
            y[0] += DOT_SIZE;
        }
    }

    private void checkCollision() {
        for (int z = dots; z > 0; z--) {

            if ((z > 4) && (x[0] == x[z]) && (y[0] == y[z])) {
                inGame = false;
            }
        }
        if (y[0] >= BOARD_HEIGHT) {
            inGame = false;
        }
        if (y[0] < 0) {
            inGame = false;
        }
        if (x[0] >= BOARD_WIDTH) {
            inGame = false;
        }
        if (x[0] < 0) {
            inGame = false;
        }
        if(!inGame) {
            timer.stop();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (inGame) {

            checkApple();
            checkCollision();
            move();
        }
        repaint();
    }

    private void locateApple() {
        int r = (int) (Math.random() * RANDOM_POSITION);
        appleX = ((r * DOT_SIZE));

        r = (int) (Math.random() * RANDOM_POSITION);
        appleY = ((r * DOT_SIZE));
    }



    private class TAdapter extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            int key = e.getKeyCode();

            if ((key == KeyEvent.VK_LEFT) && (!rDirection)) {
                lDirection = true;
                uDirection = false;
                dDirection = false;
            }
            if ((key == KeyEvent.VK_RIGHT) && (!lDirection)) {
                rDirection = true;
                uDirection = false;
                dDirection = false;
            }
            if ((key == KeyEvent.VK_UP) && (!dDirection)) {
                uDirection = true;
                rDirection = false;
                lDirection = false;
            }
            if ((key == KeyEvent.VK_DOWN) && (!uDirection)) {
                dDirection = true;
                rDirection = false;
                lDirection = false;
            }
        }
    }
}
